// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeretanaApi.Entities.DataContext;

#nullable disable

namespace TeretanaApi.Migrations
{
    [DbContext(typeof(GymContext))]
    [Migration("20220514093257_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupTrainingUser", b =>
                {
                    b.Property<Guid>("GroupTrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupTrainingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupTrainingUser");

                    b.HasData(
                        new
                        {
                            GroupTrainingId = new Guid("d2153f69-fe08-41b4-8256-c693c16d30ec"),
                            UserId = new Guid("668abb5d-51f7-4db1-b3b4-69b3fc32fa6e")
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = new Guid("d3a4cf13-5404-426a-8410-4573ed67214c"),
                            City = "Novi Sad",
                            PostalCode = "21000",
                            Street = "Branka Ilica",
                            StreetNumber = "1"
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.Basket", b =>
                {
                    b.Property<Guid>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BasketId");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets");

                    b.HasData(
                        new
                        {
                            BasketId = new Guid("6d4550ec-122d-4bd1-a823-d136edd94bf7"),
                            DateTimeOfPurchase = new DateTime(2022, 1, 6, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = true,
                            UserId = new Guid("668abb5d-51f7-4db1-b3b4-69b3fc32fa6e")
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.BasketEquipment", b =>
                {
                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BasketId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("BasketEquipment");

                    b.HasData(
                        new
                        {
                            BasketId = new Guid("6d4550ec-122d-4bd1-a823-d136edd94bf7"),
                            EquipmentId = new Guid("5cd97245-918b-4ba7-9068-3158aeb24feb"),
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.BasketSuplement", b =>
                {
                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SuplementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BasketId", "SuplementId");

                    b.HasIndex("SuplementId");

                    b.ToTable("BasketSuplement");

                    b.HasData(
                        new
                        {
                            BasketId = new Guid("6d4550ec-122d-4bd1-a823-d136edd94bf7"),
                            SuplementId = new Guid("9e6bb816-2db3-46d7-91f9-0a175578f4bd"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.Equipment", b =>
                {
                    b.Property<Guid>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquipmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            EquipmentId = new Guid("5cd97245-918b-4ba7-9068-3158aeb24feb"),
                            Description = "Gumirane bučice sa hromiranim rukohvatom",
                            EquipmentTypeId = new Guid("3e25fa5b-5717-4722-9d33-d05db2f5733b"),
                            Manufacturer = "Kina",
                            Name = "HEX BUČICE, PROFESIONALNE FIKSNE GUMIRANE 2.5kg",
                            Price = 350.0,
                            Quantity = 10
                        },
                        new
                        {
                            EquipmentId = new Guid("bd659cae-3bd6-4a1e-8bce-3d19b666548d"),
                            Description = "Liveni tegovi Fi 30 promera rupe 30mm odnosno u Fi 30 standardu. Idealni za kućno vežbanje i odgovaraju za sve šipke Fi 30.Liveni teg se može koristiti za male šipke za bučice i za velike prave šipke za trening benča, ramena, mrtvog dizanja i sl.Ploče su izlivene od metala i farbane u crno.",
                            EquipmentTypeId = new Guid("acc47e70-1611-4691-b2d2-81eb1ed0d30c"),
                            Manufacturer = "Capriolo",
                            Name = "LIVENI TEGOVI FI30 10kg",
                            Price = 2600.0,
                            Quantity = 8
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.EquipmentType", b =>
                {
                    b.Property<Guid>("EquipmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentTypeId");

                    b.ToTable("EquipmentTypes");

                    b.HasData(
                        new
                        {
                            EquipmentTypeId = new Guid("3e25fa5b-5717-4722-9d33-d05db2f5733b"),
                            Name = "Bučice"
                        },
                        new
                        {
                            EquipmentTypeId = new Guid("acc47e70-1611-4691-b2d2-81eb1ed0d30c"),
                            Name = "Tegovi"
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.GroupTraining", b =>
                {
                    b.Property<Guid>("GroupTrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeOfGroupTraining")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupTrainingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupTrainingId");

                    b.HasIndex("GroupTrainingTypeId");

                    b.HasIndex("TrainerId");

                    b.ToTable("GroupTrainings");

                    b.HasData(
                        new
                        {
                            GroupTrainingId = new Guid("d2153f69-fe08-41b4-8256-c693c16d30ec"),
                            DateTimeOfGroupTraining = new DateTime(2022, 1, 7, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupTrainingTypeId = new Guid("e1d2a65b-e62e-4b0e-b6b3-fbdaf9ee013b"),
                            TrainerId = new Guid("35c20dc1-e401-4e08-8b48-4b058a4388b5")
                        },
                        new
                        {
                            GroupTrainingId = new Guid("df27a844-f104-4ef2-9ddb-cfc49cee6a57"),
                            DateTimeOfGroupTraining = new DateTime(2022, 1, 7, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupTrainingTypeId = new Guid("383ed840-cd75-4c7b-9b20-a2bc74c4b25e"),
                            TrainerId = new Guid("35c20dc1-e401-4e08-8b48-4b058a4388b5")
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.GroupTrainingType", b =>
                {
                    b.Property<Guid>("GroupTrainingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupTrainingTypeId");

                    b.ToTable("GroupTrainingTypes");

                    b.HasData(
                        new
                        {
                            GroupTrainingTypeId = new Guid("383ed840-cd75-4c7b-9b20-a2bc74c4b25e"),
                            Description = "Jak i funkcionalan trbušni zid predstavlja temelj za bavljenje bilo kojim sportom ili fizičkom aktivnošću. Dominantne mišićne grupe koje se aktiviraju prilikom ovog načina treniranja su mišići donjih ekstremiteta, trbušnih i leđnih, kao i gluteus.",
                            Duration = 60,
                            Name = "Glute & core"
                        },
                        new
                        {
                            GroupTrainingTypeId = new Guid("e1d2a65b-e62e-4b0e-b6b3-fbdaf9ee013b"),
                            Description = "Power Pump trening aktivira celo telo, svaku mišićnu grupu, noge, leđa, grudi, ramena, ruke i trbušno jezgro. Opterećivanjem celog tela na svakom treningu sa tegovima i velikim brojem ponavljanja, značajno se utiče na sagorevanje kalorija, smanjivanje masnog tkiva, kao i izgradnju mišične mase.",
                            Duration = 45,
                            Name = "Power pump"
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.Membership", b =>
                {
                    b.Property<Guid>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeOfPayment")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MembershipTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MembershipId");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            MembershipId = new Guid("1a1ae6ea-5cf4-419a-a5ab-5888aa177a34"),
                            DateTimeOfPayment = new DateTime(2022, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            MembershipTypeId = new Guid("b4eac379-5cf2-4caa-807a-253deb228a59"),
                            UserId = new Guid("668abb5d-51f7-4db1-b3b4-69b3fc32fa6e")
                        },
                        new
                        {
                            MembershipId = new Guid("c02e8458-930f-4e0d-bd28-66361dd72f85"),
                            DateTimeOfPayment = new DateTime(2022, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            MembershipTypeId = new Guid("22efe84a-c425-4b2c-8b40-fa00e934c18b"),
                            UserId = new Guid("17b66c64-185f-48e0-9901-b322b8523760")
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.MembershipType", b =>
                {
                    b.Property<Guid>("MembershipTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfGroupTrainings")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTrainings")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("MembershipTypeId");

                    b.ToTable("MembershipTypes");

                    b.HasData(
                        new
                        {
                            MembershipTypeId = new Guid("22efe84a-c425-4b2c-8b40-fa00e934c18b"),
                            Name = "30 treninga",
                            NumberOfGroupTrainings = 0,
                            NumberOfTrainings = 30,
                            Price = 3000.0
                        },
                        new
                        {
                            MembershipTypeId = new Guid("b4eac379-5cf2-4caa-807a-253deb228a59"),
                            Name = "10 grupnih treninga",
                            NumberOfGroupTrainings = 10,
                            NumberOfTrainings = 0,
                            Price = 2000.0
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.Suplement", b =>
                {
                    b.Property<Guid>("SuplementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SuplementTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SuplementId");

                    b.HasIndex("SuplementTypeId");

                    b.ToTable("Suplements");

                    b.HasData(
                        new
                        {
                            SuplementId = new Guid("9e6bb816-2db3-46d7-91f9-0a175578f4bd"),
                            Description = "Amino Whey Hydro protein The Nutrition. je preko 86% Protein i sadrži gotovo ništa Masti ili Ugljenih Hidrata. Pruža sinergističku mešavinu nakvalitetnijih izvora Proteina, koji ne samo da povećavaju sintezu Proteina, volumen ćelija i misićni anabolizam, dok istovremeno štite zglobove i hrskavice, već i jačaju imuni sistem i smanjuju nivo lošeg (LDL) Holesterola i smanjuju mogućnost Srčanih Bolesti.",
                            Manufacturer = "The Nutrition",
                            Name = "THE AMINO WHEY HYDRO PROTEIN 3.500 G",
                            Price = 7390.0,
                            Quantity = 10,
                            SuplementTypeId = new Guid("645b8bb6-0fa8-4082-8c8c-7fef241b7bce")
                        },
                        new
                        {
                            SuplementId = new Guid("d6e14c22-bc87-44ce-8c9d-5196e388d621"),
                            Description = "100% Whey Protein je napredna formula proteina surutke, napravljena za sve sportaše, koji žele više mišića, više snage i brži oporavak. Svaki obrok osigurava 22g whey proteina surutke i 5 grama aminokiselina razgranatog lanca (BCAA), te sa 2,4 grama možda i najbitnije aminokiseline L-leucin.",
                            Manufacturer = "The Nutrition",
                            Name = "THE BASIC 100% WHEY PROTEIN 1800 GRAMA",
                            Price = 3600.0,
                            Quantity = 15,
                            SuplementTypeId = new Guid("645b8bb6-0fa8-4082-8c8c-7fef241b7bce")
                        },
                        new
                        {
                            SuplementId = new Guid("38307eb9-669e-4c5a-b17c-237f6e52f5e2"),
                            Description = "THE Kreatin monohidrat povećava sintezu molekula ATP (adenozin-tri-fosfata), koja direktno utiče na povećanje snage i izdržljivosti kod anaerobnih aktivnosti,a samim tim i jacu prokrvljenost misica i na taj nacin indirektan uticaj na misicnu masu.",
                            Manufacturer = "The Nutrition",
                            Name = "THE CREATINE - 1000G (KREATIN MONOHIDRAT)",
                            Price = 3600.0,
                            Quantity = 15,
                            SuplementTypeId = new Guid("96fbee9a-2887-4cec-8f8b-a185da06d29b")
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.SuplementType", b =>
                {
                    b.Property<Guid>("SuplementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuplementTypeId");

                    b.ToTable("SuplementTypes");

                    b.HasData(
                        new
                        {
                            SuplementTypeId = new Guid("645b8bb6-0fa8-4082-8c8c-7fef241b7bce"),
                            Name = "Protein"
                        },
                        new
                        {
                            SuplementTypeId = new Guid("96fbee9a-2887-4cec-8f8b-a185da06d29b"),
                            Name = "Kreatin"
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.Trainer", b =>
                {
                    b.Property<Guid>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainerId");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("TeretanaApi.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfGroupTraings")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfTrainings")
                        .HasColumnType("int");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("UserTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("17b66c64-185f-48e0-9901-b322b8523760"),
                            AddressId = new Guid("d3a4cf13-5404-426a-8410-4573ed67214c"),
                            ContactNumber = "0665235235",
                            Email = "gavrilo@gmail.com",
                            FirstName = "Gavrilo",
                            LastName = "Stanic",
                            NumberOfGroupTraings = 0,
                            NumberOfTrainings = 3,
                            Password = new byte[] { 55, 210, 44, 162, 209, 215, 29, 146, 62, 8, 132, 169, 224, 0, 25, 155, 22, 56, 209, 7, 131, 162, 63, 190, 155, 58, 149, 51, 127, 147, 15, 184, 244, 32, 156, 255, 225, 30, 1, 212, 117, 29, 50, 69, 22, 95, 1, 173, 125, 104, 212, 179, 187, 78, 175, 253, 145, 128, 100, 237, 53, 94, 198, 92 },
                            PasswordSalt = new byte[] { 189, 120, 189, 42, 7, 247, 180, 188, 237, 207, 67, 168, 101, 53, 195, 6, 107, 128, 85, 116, 59, 140, 223, 243, 137, 229, 93, 171, 231, 78, 242, 90, 164, 224, 226, 196, 60, 82, 152, 71, 4, 11, 195, 18, 45, 231, 68, 58, 175, 138, 30, 174, 151, 29, 210, 104, 238, 12, 216, 210, 246, 41, 44, 108, 46, 45, 36, 102, 189, 21, 226, 221, 150, 84, 72, 120, 196, 2, 116, 70, 68, 247, 199, 116, 190, 202, 120, 26, 124, 140, 247, 71, 131, 161, 90, 73, 100, 240, 13, 153, 28, 196, 176, 136, 223, 253, 109, 164, 220, 207, 7, 95, 77, 81, 25, 53, 143, 59, 143, 229, 215, 3, 223, 113, 56, 232, 130, 115 },
                            UserTypeId = new Guid("7f342d88-3f53-490f-a3cd-1186251af607")
                        },
                        new
                        {
                            UserId = new Guid("668abb5d-51f7-4db1-b3b4-69b3fc32fa6e"),
                            AddressId = new Guid("d3a4cf13-5404-426a-8410-4573ed67214c"),
                            ContactNumber = "06653252354",
                            Email = "marko@gmail.com",
                            FirstName = "Marko",
                            LastName = "Stanic",
                            NumberOfGroupTraings = 8,
                            NumberOfTrainings = 0,
                            Password = new byte[] { 145, 164, 181, 33, 40, 80, 174, 132, 201, 128, 175, 172, 148, 77, 163, 78, 189, 100, 103, 62, 220, 153, 183, 68, 213, 112, 134, 133, 199, 144, 115, 239, 205, 144, 228, 1, 149, 22, 170, 9, 136, 66, 253, 88, 211, 137, 246, 51, 145, 133, 140, 93, 39, 30, 171, 173, 140, 42, 91, 182, 42, 247, 0, 202 },
                            PasswordSalt = new byte[] { 227, 229, 252, 121, 248, 160, 105, 106, 177, 193, 208, 241, 199, 85, 12, 209, 128, 203, 239, 190, 82, 196, 232, 125, 35, 35, 141, 175, 250, 142, 208, 209, 191, 8, 213, 142, 82, 180, 83, 74, 56, 114, 20, 24, 133, 42, 154, 197, 188, 116, 114, 147, 169, 12, 133, 198, 157, 92, 50, 117, 211, 173, 68, 223, 7, 148, 0, 2, 2, 86, 221, 87, 243, 134, 200, 107, 145, 209, 238, 0, 104, 214, 189, 250, 45, 113, 133, 152, 88, 5, 239, 73, 222, 248, 3, 45, 23, 213, 162, 184, 198, 112, 76, 80, 152, 195, 227, 6, 24, 100, 79, 160, 8, 2, 250, 177, 81, 141, 30, 79, 19, 226, 17, 250, 15, 248, 173, 22 },
                            UserTypeId = new Guid("6bc0cc6a-c600-4ae9-8e2e-d4b61b601701")
                        },
                        new
                        {
                            UserId = new Guid("35c20dc1-e401-4e08-8b48-4b058a4388b5"),
                            AddressId = new Guid("d3a4cf13-5404-426a-8410-4573ed67214c"),
                            ContactNumber = "0665235325",
                            Email = "Petar@gmail.com",
                            FirstName = "Petar",
                            LastName = "Markovic",
                            NumberOfGroupTraings = 0,
                            NumberOfTrainings = 0,
                            Password = new byte[] { 9, 111, 43, 224, 117, 57, 19, 222, 37, 144, 21, 206, 83, 13, 104, 220, 24, 65, 208, 186, 246, 95, 57, 62, 111, 218, 234, 156, 76, 150, 212, 249, 102, 46, 198, 13, 50, 183, 111, 197, 58, 25, 97, 166, 41, 192, 248, 95, 149, 198, 121, 148, 194, 90, 88, 151, 168, 231, 33, 28, 29, 130, 241, 183 },
                            PasswordSalt = new byte[] { 72, 106, 47, 146, 45, 36, 53, 31, 29, 124, 175, 98, 102, 185, 163, 76, 33, 96, 61, 201, 100, 94, 195, 145, 170, 81, 14, 118, 47, 196, 76, 167, 70, 126, 82, 109, 44, 251, 84, 248, 63, 42, 76, 0, 4, 127, 6, 9, 252, 23, 175, 48, 11, 61, 132, 10, 118, 74, 51, 243, 198, 142, 175, 51, 221, 121, 213, 237, 0, 240, 47, 54, 107, 213, 140, 33, 126, 104, 14, 228, 103, 201, 119, 128, 145, 141, 238, 205, 34, 123, 251, 150, 78, 176, 19, 208, 99, 2, 150, 73, 189, 31, 255, 1, 2, 90, 12, 139, 205, 81, 50, 178, 157, 155, 129, 18, 167, 135, 157, 194, 233, 55, 188, 71, 155, 118, 55, 239 },
                            UserTypeId = new Guid("51371a38-00fa-4171-be2c-002e483ed463")
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.UserType", b =>
                {
                    b.Property<Guid>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            UserTypeId = new Guid("7f342d88-3f53-490f-a3cd-1186251af607"),
                            Name = "Admin"
                        },
                        new
                        {
                            UserTypeId = new Guid("6bc0cc6a-c600-4ae9-8e2e-d4b61b601701"),
                            Name = "User"
                        },
                        new
                        {
                            UserTypeId = new Guid("51371a38-00fa-4171-be2c-002e483ed463"),
                            Name = "Trainer"
                        });
                });

            modelBuilder.Entity("GroupTrainingUser", b =>
                {
                    b.HasOne("TeretanaApi.Entities.GroupTraining", null)
                        .WithMany()
                        .HasForeignKey("GroupTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeretanaApi.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeretanaApi.Entities.Basket", b =>
                {
                    b.HasOne("TeretanaApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeretanaApi.Entities.BasketEquipment", b =>
                {
                    b.HasOne("TeretanaApi.Entities.Basket", "Basket")
                        .WithMany("Equipments")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeretanaApi.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("TeretanaApi.Entities.BasketSuplement", b =>
                {
                    b.HasOne("TeretanaApi.Entities.Basket", "Basket")
                        .WithMany("Suplements")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeretanaApi.Entities.Suplement", "Suplement")
                        .WithMany()
                        .HasForeignKey("SuplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Suplement");
                });

            modelBuilder.Entity("TeretanaApi.Entities.Equipment", b =>
                {
                    b.HasOne("TeretanaApi.Entities.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("TeretanaApi.Entities.GroupTraining", b =>
                {
                    b.HasOne("TeretanaApi.Entities.GroupTrainingType", "GroupTrainingType")
                        .WithMany()
                        .HasForeignKey("GroupTrainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeretanaApi.Entities.User", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GroupTrainingType");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("TeretanaApi.Entities.Membership", b =>
                {
                    b.HasOne("TeretanaApi.Entities.MembershipType", "MembershipType")
                        .WithMany()
                        .HasForeignKey("MembershipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeretanaApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MembershipType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeretanaApi.Entities.Suplement", b =>
                {
                    b.HasOne("TeretanaApi.Entities.SuplementType", "SuplementType")
                        .WithMany()
                        .HasForeignKey("SuplementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuplementType");
                });

            modelBuilder.Entity("TeretanaApi.Entities.User", b =>
                {
                    b.HasOne("TeretanaApi.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeretanaApi.Entities.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("TeretanaApi.Entities.Basket", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("Suplements");
                });
#pragma warning restore 612, 618
        }
    }
}
