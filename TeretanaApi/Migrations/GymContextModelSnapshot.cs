// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeretanaApi.Entities.DataContext;

#nullable disable

namespace TeretanaApi.Migrations
{
    [DbContext(typeof(GymContext))]
    partial class GymContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupTrainingUser", b =>
                {
                    b.Property<Guid>("GroupTrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupTrainingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupTrainingUser");

                    b.HasData(
                        new
                        {
                            GroupTrainingId = new Guid("d2153f69-fe08-41b4-8256-c693c16d30ec"),
                            UserId = new Guid("668abb5d-51f7-4db1-b3b4-69b3fc32fa6e")
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = new Guid("d3a4cf13-5404-426a-8410-4573ed67214c"),
                            City = "Novi Sad",
                            PostalCode = "21000",
                            Street = "Branka Ilica",
                            StreetNumber = "1"
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.Basket", b =>
                {
                    b.Property<Guid>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BasketId");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets");

                    b.HasData(
                        new
                        {
                            BasketId = new Guid("6d4550ec-122d-4bd1-a823-d136edd94bf7"),
                            DateTimeOfPurchase = new DateTime(2022, 1, 6, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = true,
                            UserId = new Guid("668abb5d-51f7-4db1-b3b4-69b3fc32fa6e")
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.BasketEquipment", b =>
                {
                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BasketId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("BasketEquipment");

                    b.HasData(
                        new
                        {
                            BasketId = new Guid("6d4550ec-122d-4bd1-a823-d136edd94bf7"),
                            EquipmentId = new Guid("5cd97245-918b-4ba7-9068-3158aeb24feb"),
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.BasketSuplement", b =>
                {
                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SuplementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BasketId", "SuplementId");

                    b.HasIndex("SuplementId");

                    b.ToTable("BasketSuplement");

                    b.HasData(
                        new
                        {
                            BasketId = new Guid("6d4550ec-122d-4bd1-a823-d136edd94bf7"),
                            SuplementId = new Guid("9e6bb816-2db3-46d7-91f9-0a175578f4bd"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.Equipment", b =>
                {
                    b.Property<Guid>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquipmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PriceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            EquipmentId = new Guid("5cd97245-918b-4ba7-9068-3158aeb24feb"),
                            Description = "Gumirane bučice sa hromiranim rukohvatom",
                            EquipmentTypeId = new Guid("3e25fa5b-5717-4722-9d33-d05db2f5733b"),
                            Manufacturer = "Kina",
                            Name = "HEX BUČICE, PROFESIONALNE FIKSNE GUMIRANE 2.5kg",
                            Price = 350.0,
                            PriceId = "",
                            ProductId = "",
                            Quantity = 10
                        },
                        new
                        {
                            EquipmentId = new Guid("bd659cae-3bd6-4a1e-8bce-3d19b666548d"),
                            Description = "Liveni tegovi Fi 30 promera rupe 30mm odnosno u Fi 30 standardu. Idealni za kućno vežbanje i odgovaraju za sve šipke Fi 30.Liveni teg se može koristiti za male šipke za bučice i za velike prave šipke za trening benča, ramena, mrtvog dizanja i sl.Ploče su izlivene od metala i farbane u crno.",
                            EquipmentTypeId = new Guid("acc47e70-1611-4691-b2d2-81eb1ed0d30c"),
                            Manufacturer = "Capriolo",
                            Name = "LIVENI TEGOVI FI30 10kg",
                            Price = 2600.0,
                            PriceId = "",
                            ProductId = "",
                            Quantity = 8
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.EquipmentType", b =>
                {
                    b.Property<Guid>("EquipmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentTypeId");

                    b.ToTable("EquipmentTypes");

                    b.HasData(
                        new
                        {
                            EquipmentTypeId = new Guid("3e25fa5b-5717-4722-9d33-d05db2f5733b"),
                            Name = "Bučice"
                        },
                        new
                        {
                            EquipmentTypeId = new Guid("acc47e70-1611-4691-b2d2-81eb1ed0d30c"),
                            Name = "Tegovi"
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.GroupTraining", b =>
                {
                    b.Property<Guid>("GroupTrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeOfGroupTraining")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupTrainingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupTrainingId");

                    b.HasIndex("GroupTrainingTypeId");

                    b.HasIndex("TrainerId");

                    b.ToTable("GroupTrainings");

                    b.HasData(
                        new
                        {
                            GroupTrainingId = new Guid("d2153f69-fe08-41b4-8256-c693c16d30ec"),
                            DateTimeOfGroupTraining = new DateTime(2022, 1, 7, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupTrainingTypeId = new Guid("e1d2a65b-e62e-4b0e-b6b3-fbdaf9ee013b"),
                            TrainerId = new Guid("35c20dc1-e401-4e08-8b48-4b058a4388b5")
                        },
                        new
                        {
                            GroupTrainingId = new Guid("df27a844-f104-4ef2-9ddb-cfc49cee6a57"),
                            DateTimeOfGroupTraining = new DateTime(2022, 1, 7, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupTrainingTypeId = new Guid("383ed840-cd75-4c7b-9b20-a2bc74c4b25e"),
                            TrainerId = new Guid("35c20dc1-e401-4e08-8b48-4b058a4388b5")
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.GroupTrainingType", b =>
                {
                    b.Property<Guid>("GroupTrainingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupTrainingTypeId");

                    b.ToTable("GroupTrainingTypes");

                    b.HasData(
                        new
                        {
                            GroupTrainingTypeId = new Guid("383ed840-cd75-4c7b-9b20-a2bc74c4b25e"),
                            Description = "Jak i funkcionalan trbušni zid predstavlja temelj za bavljenje bilo kojim sportom ili fizičkom aktivnošću. Dominantne mišićne grupe koje se aktiviraju prilikom ovog načina treniranja su mišići donjih ekstremiteta, trbušnih i leđnih, kao i gluteus.",
                            Duration = 60,
                            Name = "Glute & core"
                        },
                        new
                        {
                            GroupTrainingTypeId = new Guid("e1d2a65b-e62e-4b0e-b6b3-fbdaf9ee013b"),
                            Description = "Power Pump trening aktivira celo telo, svaku mišićnu grupu, noge, leđa, grudi, ramena, ruke i trbušno jezgro. Opterećivanjem celog tela na svakom treningu sa tegovima i velikim brojem ponavljanja, značajno se utiče na sagorevanje kalorija, smanjivanje masnog tkiva, kao i izgradnju mišične mase.",
                            Duration = 45,
                            Name = "Power pump"
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.Membership", b =>
                {
                    b.Property<Guid>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeOfPayment")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MembershipTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MembershipId");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            MembershipId = new Guid("1a1ae6ea-5cf4-419a-a5ab-5888aa177a34"),
                            DateTimeOfPayment = new DateTime(2022, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            MembershipTypeId = new Guid("b4eac379-5cf2-4caa-807a-253deb228a59"),
                            UserId = new Guid("668abb5d-51f7-4db1-b3b4-69b3fc32fa6e")
                        },
                        new
                        {
                            MembershipId = new Guid("c02e8458-930f-4e0d-bd28-66361dd72f85"),
                            DateTimeOfPayment = new DateTime(2022, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            MembershipTypeId = new Guid("22efe84a-c425-4b2c-8b40-fa00e934c18b"),
                            UserId = new Guid("17b66c64-185f-48e0-9901-b322b8523760")
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.MembershipType", b =>
                {
                    b.Property<Guid>("MembershipTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfGroupTrainings")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTrainings")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PriceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MembershipTypeId");

                    b.ToTable("MembershipTypes");

                    b.HasData(
                        new
                        {
                            MembershipTypeId = new Guid("22efe84a-c425-4b2c-8b40-fa00e934c18b"),
                            Name = "30 treninga",
                            NumberOfGroupTrainings = 0,
                            NumberOfTrainings = 30,
                            Price = 3000.0,
                            PriceId = "",
                            ProductId = ""
                        },
                        new
                        {
                            MembershipTypeId = new Guid("b4eac379-5cf2-4caa-807a-253deb228a59"),
                            Name = "10 grupnih treninga",
                            NumberOfGroupTrainings = 10,
                            NumberOfTrainings = 0,
                            Price = 2000.0,
                            PriceId = "",
                            ProductId = ""
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.Suplement", b =>
                {
                    b.Property<Guid>("SuplementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PriceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SuplementTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SuplementId");

                    b.HasIndex("SuplementTypeId");

                    b.ToTable("Suplements");

                    b.HasData(
                        new
                        {
                            SuplementId = new Guid("9e6bb816-2db3-46d7-91f9-0a175578f4bd"),
                            Description = "Amino Whey Hydro protein The Nutrition. je preko 86% Protein i sadrži gotovo ništa Masti ili Ugljenih Hidrata. Pruža sinergističku mešavinu nakvalitetnijih izvora Proteina, koji ne samo da povećavaju sintezu Proteina, volumen ćelija i misićni anabolizam, dok istovremeno štite zglobove i hrskavice, već i jačaju imuni sistem i smanjuju nivo lošeg (LDL) Holesterola i smanjuju mogućnost Srčanih Bolesti.",
                            Manufacturer = "The Nutrition",
                            Name = "THE AMINO WHEY HYDRO PROTEIN 3.500 G",
                            Price = 7390.0,
                            PriceId = "",
                            ProductId = "",
                            Quantity = 10,
                            SuplementTypeId = new Guid("645b8bb6-0fa8-4082-8c8c-7fef241b7bce")
                        },
                        new
                        {
                            SuplementId = new Guid("d6e14c22-bc87-44ce-8c9d-5196e388d621"),
                            Description = "100% Whey Protein je napredna formula proteina surutke, napravljena za sve sportaše, koji žele više mišića, više snage i brži oporavak. Svaki obrok osigurava 22g whey proteina surutke i 5 grama aminokiselina razgranatog lanca (BCAA), te sa 2,4 grama možda i najbitnije aminokiseline L-leucin.",
                            Manufacturer = "The Nutrition",
                            Name = "THE BASIC 100% WHEY PROTEIN 1800 GRAMA",
                            Price = 3600.0,
                            PriceId = "",
                            ProductId = "",
                            Quantity = 15,
                            SuplementTypeId = new Guid("645b8bb6-0fa8-4082-8c8c-7fef241b7bce")
                        },
                        new
                        {
                            SuplementId = new Guid("38307eb9-669e-4c5a-b17c-237f6e52f5e2"),
                            Description = "THE Kreatin monohidrat povećava sintezu molekula ATP (adenozin-tri-fosfata), koja direktno utiče na povećanje snage i izdržljivosti kod anaerobnih aktivnosti,a samim tim i jacu prokrvljenost misica i na taj nacin indirektan uticaj na misicnu masu.",
                            Manufacturer = "The Nutrition",
                            Name = "THE CREATINE - 1000G (KREATIN MONOHIDRAT)",
                            Price = 3600.0,
                            PriceId = "",
                            ProductId = "",
                            Quantity = 15,
                            SuplementTypeId = new Guid("96fbee9a-2887-4cec-8f8b-a185da06d29b")
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.SuplementType", b =>
                {
                    b.Property<Guid>("SuplementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuplementTypeId");

                    b.ToTable("SuplementTypes");

                    b.HasData(
                        new
                        {
                            SuplementTypeId = new Guid("645b8bb6-0fa8-4082-8c8c-7fef241b7bce"),
                            Name = "Protein"
                        },
                        new
                        {
                            SuplementTypeId = new Guid("96fbee9a-2887-4cec-8f8b-a185da06d29b"),
                            Name = "Kreatin"
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.Trainer", b =>
                {
                    b.Property<Guid>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainerId");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("TeretanaApi.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfGroupTraings")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfTrainings")
                        .HasColumnType("int");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("UserTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("17b66c64-185f-48e0-9901-b322b8523760"),
                            AddressId = new Guid("d3a4cf13-5404-426a-8410-4573ed67214c"),
                            ContactNumber = "0665235235",
                            Email = "gavrilo@gmail.com",
                            FirstName = "Gavrilo",
                            LastName = "Stanic",
                            NumberOfGroupTraings = 0,
                            NumberOfTrainings = 3,
                            Password = new byte[] { 76, 140, 241, 227, 61, 234, 133, 74, 172, 205, 188, 209, 208, 123, 188, 250, 160, 228, 207, 20, 210, 173, 104, 75, 240, 9, 4, 67, 220, 106, 238, 17, 204, 118, 190, 169, 116, 120, 40, 22, 159, 177, 232, 136, 84, 216, 188, 82, 111, 67, 103, 188, 212, 128, 19, 78, 27, 192, 55, 233, 208, 109, 210, 210 },
                            PasswordSalt = new byte[] { 46, 254, 28, 115, 179, 121, 41, 100, 89, 217, 181, 124, 83, 240, 1, 60, 81, 207, 135, 105, 27, 131, 66, 106, 245, 141, 8, 91, 44, 49, 239, 105, 85, 10, 91, 64, 46, 221, 255, 179, 115, 218, 235, 237, 171, 2, 219, 170, 190, 171, 146, 125, 73, 243, 23, 137, 104, 173, 138, 226, 114, 216, 156, 232, 239, 13, 131, 177, 233, 174, 57, 172, 1, 150, 236, 232, 23, 165, 219, 214, 177, 118, 236, 220, 146, 51, 197, 199, 25, 86, 12, 29, 55, 248, 223, 131, 184, 132, 193, 1, 183, 97, 89, 227, 247, 44, 156, 38, 33, 128, 188, 129, 53, 7, 238, 83, 97, 222, 33, 76, 219, 21, 79, 87, 69, 193, 22, 198 },
                            UserTypeId = new Guid("7f342d88-3f53-490f-a3cd-1186251af607")
                        },
                        new
                        {
                            UserId = new Guid("668abb5d-51f7-4db1-b3b4-69b3fc32fa6e"),
                            AddressId = new Guid("d3a4cf13-5404-426a-8410-4573ed67214c"),
                            ContactNumber = "06653252354",
                            Email = "marko@gmail.com",
                            FirstName = "Marko",
                            LastName = "Stanic",
                            NumberOfGroupTraings = 8,
                            NumberOfTrainings = 0,
                            Password = new byte[] { 168, 171, 214, 112, 140, 123, 189, 168, 118, 83, 20, 4, 128, 131, 61, 137, 192, 65, 237, 112, 145, 188, 54, 182, 94, 106, 53, 192, 193, 46, 59, 85, 32, 103, 39, 63, 167, 125, 129, 239, 219, 75, 128, 161, 196, 138, 75, 51, 54, 16, 228, 182, 53, 135, 25, 128, 187, 158, 44, 114, 64, 246, 36, 129 },
                            PasswordSalt = new byte[] { 117, 9, 41, 1, 208, 144, 205, 141, 164, 63, 226, 228, 250, 164, 183, 103, 53, 210, 145, 131, 48, 101, 250, 214, 153, 96, 8, 186, 226, 185, 201, 119, 7, 106, 87, 171, 189, 13, 255, 91, 132, 40, 95, 180, 160, 1, 197, 209, 15, 134, 189, 194, 215, 98, 50, 131, 158, 222, 44, 33, 73, 255, 17, 5, 58, 0, 109, 189, 38, 231, 200, 206, 164, 120, 181, 69, 25, 59, 68, 26, 96, 244, 69, 76, 73, 199, 160, 125, 130, 184, 252, 253, 45, 83, 93, 138, 192, 79, 244, 42, 68, 20, 187, 249, 88, 7, 148, 234, 162, 19, 217, 94, 213, 93, 89, 252, 161, 87, 29, 121, 153, 37, 124, 15, 67, 189, 202, 26 },
                            UserTypeId = new Guid("6bc0cc6a-c600-4ae9-8e2e-d4b61b601701")
                        },
                        new
                        {
                            UserId = new Guid("35c20dc1-e401-4e08-8b48-4b058a4388b5"),
                            AddressId = new Guid("d3a4cf13-5404-426a-8410-4573ed67214c"),
                            ContactNumber = "0665235325",
                            Email = "Petar@gmail.com",
                            FirstName = "Petar",
                            LastName = "Markovic",
                            NumberOfGroupTraings = 0,
                            NumberOfTrainings = 0,
                            Password = new byte[] { 108, 119, 90, 64, 50, 50, 88, 145, 17, 219, 153, 187, 109, 76, 150, 171, 35, 118, 250, 34, 221, 183, 142, 92, 42, 232, 21, 147, 148, 238, 230, 25, 247, 168, 195, 253, 124, 26, 138, 208, 254, 0, 120, 144, 204, 45, 127, 189, 178, 149, 166, 52, 76, 91, 77, 86, 96, 221, 4, 59, 136, 73, 139, 25 },
                            PasswordSalt = new byte[] { 203, 206, 67, 226, 202, 45, 176, 98, 179, 1, 234, 218, 133, 102, 29, 204, 136, 123, 117, 247, 140, 209, 37, 123, 215, 210, 182, 131, 44, 197, 66, 234, 52, 98, 213, 2, 83, 158, 71, 235, 214, 12, 16, 114, 189, 38, 36, 151, 55, 253, 51, 136, 134, 134, 149, 202, 150, 113, 125, 16, 120, 150, 210, 2, 33, 142, 139, 254, 139, 113, 239, 165, 180, 90, 228, 29, 50, 248, 157, 93, 73, 66, 53, 173, 105, 182, 62, 82, 139, 193, 54, 238, 170, 67, 86, 84, 107, 177, 142, 27, 254, 236, 24, 131, 169, 138, 152, 29, 21, 131, 106, 118, 9, 43, 105, 180, 184, 207, 83, 228, 217, 117, 90, 106, 252, 58, 72, 166 },
                            UserTypeId = new Guid("51371a38-00fa-4171-be2c-002e483ed463")
                        });
                });

            modelBuilder.Entity("TeretanaApi.Entities.UserType", b =>
                {
                    b.Property<Guid>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            UserTypeId = new Guid("7f342d88-3f53-490f-a3cd-1186251af607"),
                            Name = "Admin"
                        },
                        new
                        {
                            UserTypeId = new Guid("6bc0cc6a-c600-4ae9-8e2e-d4b61b601701"),
                            Name = "User"
                        },
                        new
                        {
                            UserTypeId = new Guid("51371a38-00fa-4171-be2c-002e483ed463"),
                            Name = "Trainer"
                        });
                });

            modelBuilder.Entity("GroupTrainingUser", b =>
                {
                    b.HasOne("TeretanaApi.Entities.GroupTraining", null)
                        .WithMany()
                        .HasForeignKey("GroupTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeretanaApi.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeretanaApi.Entities.Basket", b =>
                {
                    b.HasOne("TeretanaApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeretanaApi.Entities.BasketEquipment", b =>
                {
                    b.HasOne("TeretanaApi.Entities.Basket", "Basket")
                        .WithMany("Equipments")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeretanaApi.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("TeretanaApi.Entities.BasketSuplement", b =>
                {
                    b.HasOne("TeretanaApi.Entities.Basket", "Basket")
                        .WithMany("Suplements")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeretanaApi.Entities.Suplement", "Suplement")
                        .WithMany()
                        .HasForeignKey("SuplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Suplement");
                });

            modelBuilder.Entity("TeretanaApi.Entities.Equipment", b =>
                {
                    b.HasOne("TeretanaApi.Entities.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("TeretanaApi.Entities.GroupTraining", b =>
                {
                    b.HasOne("TeretanaApi.Entities.GroupTrainingType", "GroupTrainingType")
                        .WithMany()
                        .HasForeignKey("GroupTrainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeretanaApi.Entities.User", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GroupTrainingType");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("TeretanaApi.Entities.Membership", b =>
                {
                    b.HasOne("TeretanaApi.Entities.MembershipType", "MembershipType")
                        .WithMany()
                        .HasForeignKey("MembershipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeretanaApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MembershipType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeretanaApi.Entities.Suplement", b =>
                {
                    b.HasOne("TeretanaApi.Entities.SuplementType", "SuplementType")
                        .WithMany()
                        .HasForeignKey("SuplementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuplementType");
                });

            modelBuilder.Entity("TeretanaApi.Entities.User", b =>
                {
                    b.HasOne("TeretanaApi.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeretanaApi.Entities.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("TeretanaApi.Entities.Basket", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("Suplements");
                });
#pragma warning restore 612, 618
        }
    }
}
