using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace TeretanaApi.Migrations
{
    public partial class addUserCount : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "ActualUserCount",
                table: "GroupTrainings",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "UserCapacity",
                table: "GroupTrainings",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.UpdateData(
                table: "GroupTrainings",
                keyColumn: "GroupTrainingId",
                keyValue: new Guid("d2153f69-fe08-41b4-8256-c693c16d30ec"),
                columns: new[] { "ActualUserCount", "UserCapacity" },
                values: new object[] { 15, 20 });

            migrationBuilder.UpdateData(
                table: "GroupTrainings",
                keyColumn: "GroupTrainingId",
                keyValue: new Guid("df27a844-f104-4ef2-9ddb-cfc49cee6a57"),
                columns: new[] { "ActualUserCount", "UserCapacity" },
                values: new object[] { 15, 20 });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: new Guid("17b66c64-185f-48e0-9901-b322b8523760"),
                columns: new[] { "Password", "PasswordSalt" },
                values: new object[] { new byte[] { 160, 95, 44, 227, 117, 91, 167, 174, 170, 160, 150, 98, 133, 78, 34, 32, 198, 62, 128, 76, 119, 177, 81, 70, 84, 28, 104, 153, 0, 194, 3, 228, 28, 117, 129, 1, 140, 24, 173, 85, 139, 101, 46, 3, 58, 56, 104, 30, 216, 141, 3, 133, 44, 245, 62, 153, 213, 62, 160, 130, 94, 150, 164, 28 }, new byte[] { 58, 195, 75, 226, 153, 74, 170, 54, 92, 165, 4, 67, 12, 128, 75, 13, 57, 34, 141, 13, 28, 254, 214, 185, 45, 1, 61, 100, 119, 212, 36, 177, 236, 111, 189, 255, 26, 157, 3, 26, 195, 128, 162, 178, 126, 222, 208, 161, 19, 237, 178, 176, 202, 85, 120, 217, 241, 252, 117, 205, 73, 160, 247, 181, 153, 150, 234, 95, 209, 56, 218, 71, 194, 123, 108, 210, 176, 201, 76, 244, 14, 74, 121, 213, 26, 24, 49, 97, 132, 122, 153, 108, 95, 6, 211, 233, 222, 202, 6, 149, 152, 239, 67, 64, 52, 136, 185, 22, 192, 78, 13, 58, 41, 197, 223, 192, 6, 89, 95, 115, 117, 142, 78, 56, 79, 197, 33, 179 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: new Guid("35c20dc1-e401-4e08-8b48-4b058a4388b5"),
                columns: new[] { "Password", "PasswordSalt" },
                values: new object[] { new byte[] { 42, 116, 69, 83, 92, 59, 17, 1, 48, 82, 214, 39, 137, 139, 108, 22, 93, 123, 200, 74, 38, 196, 159, 241, 224, 78, 152, 236, 189, 217, 180, 131, 9, 176, 199, 196, 172, 40, 194, 235, 227, 10, 248, 78, 254, 152, 252, 84, 240, 47, 174, 154, 220, 72, 96, 48, 61, 70, 176, 221, 244, 119, 174, 5 }, new byte[] { 196, 38, 220, 45, 73, 214, 47, 122, 241, 124, 31, 95, 131, 32, 148, 16, 28, 250, 178, 251, 113, 156, 230, 214, 124, 190, 72, 67, 194, 241, 135, 245, 220, 82, 122, 239, 209, 17, 163, 142, 62, 57, 230, 177, 250, 57, 147, 169, 252, 134, 55, 221, 75, 141, 110, 209, 90, 90, 147, 196, 15, 59, 28, 141, 216, 102, 204, 2, 182, 0, 131, 218, 173, 222, 159, 41, 213, 242, 123, 109, 51, 163, 184, 101, 231, 165, 187, 86, 50, 93, 184, 165, 130, 44, 52, 192, 0, 108, 228, 27, 151, 173, 142, 106, 65, 241, 32, 78, 116, 48, 228, 249, 183, 0, 143, 196, 2, 39, 159, 217, 145, 157, 119, 114, 5, 245, 73, 135 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: new Guid("668abb5d-51f7-4db1-b3b4-69b3fc32fa6e"),
                columns: new[] { "Password", "PasswordSalt" },
                values: new object[] { new byte[] { 28, 86, 82, 126, 228, 82, 110, 86, 243, 10, 133, 129, 14, 123, 215, 53, 139, 249, 197, 194, 92, 102, 167, 188, 78, 41, 159, 86, 222, 32, 25, 217, 33, 26, 30, 225, 78, 38, 172, 50, 46, 44, 31, 24, 75, 139, 238, 123, 212, 169, 86, 97, 165, 183, 14, 8, 123, 199, 217, 31, 9, 196, 246, 51 }, new byte[] { 191, 85, 233, 222, 154, 151, 33, 95, 113, 237, 219, 10, 255, 169, 81, 188, 161, 212, 126, 200, 0, 161, 154, 158, 236, 168, 233, 91, 131, 120, 182, 230, 74, 9, 64, 166, 181, 49, 218, 211, 106, 127, 34, 170, 150, 11, 147, 140, 56, 7, 108, 71, 44, 221, 6, 99, 159, 234, 142, 77, 81, 95, 64, 154, 103, 134, 131, 145, 75, 184, 136, 27, 30, 172, 149, 36, 28, 100, 168, 61, 255, 77, 101, 222, 125, 231, 212, 169, 161, 212, 2, 207, 47, 187, 11, 196, 3, 212, 56, 40, 7, 98, 136, 26, 39, 135, 100, 21, 106, 111, 131, 136, 81, 108, 213, 35, 227, 124, 18, 188, 119, 194, 65, 170, 22, 47, 149, 110 } });
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "ActualUserCount",
                table: "GroupTrainings");

            migrationBuilder.DropColumn(
                name: "UserCapacity",
                table: "GroupTrainings");

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: new Guid("17b66c64-185f-48e0-9901-b322b8523760"),
                columns: new[] { "Password", "PasswordSalt" },
                values: new object[] { new byte[] { 76, 140, 241, 227, 61, 234, 133, 74, 172, 205, 188, 209, 208, 123, 188, 250, 160, 228, 207, 20, 210, 173, 104, 75, 240, 9, 4, 67, 220, 106, 238, 17, 204, 118, 190, 169, 116, 120, 40, 22, 159, 177, 232, 136, 84, 216, 188, 82, 111, 67, 103, 188, 212, 128, 19, 78, 27, 192, 55, 233, 208, 109, 210, 210 }, new byte[] { 46, 254, 28, 115, 179, 121, 41, 100, 89, 217, 181, 124, 83, 240, 1, 60, 81, 207, 135, 105, 27, 131, 66, 106, 245, 141, 8, 91, 44, 49, 239, 105, 85, 10, 91, 64, 46, 221, 255, 179, 115, 218, 235, 237, 171, 2, 219, 170, 190, 171, 146, 125, 73, 243, 23, 137, 104, 173, 138, 226, 114, 216, 156, 232, 239, 13, 131, 177, 233, 174, 57, 172, 1, 150, 236, 232, 23, 165, 219, 214, 177, 118, 236, 220, 146, 51, 197, 199, 25, 86, 12, 29, 55, 248, 223, 131, 184, 132, 193, 1, 183, 97, 89, 227, 247, 44, 156, 38, 33, 128, 188, 129, 53, 7, 238, 83, 97, 222, 33, 76, 219, 21, 79, 87, 69, 193, 22, 198 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: new Guid("35c20dc1-e401-4e08-8b48-4b058a4388b5"),
                columns: new[] { "Password", "PasswordSalt" },
                values: new object[] { new byte[] { 108, 119, 90, 64, 50, 50, 88, 145, 17, 219, 153, 187, 109, 76, 150, 171, 35, 118, 250, 34, 221, 183, 142, 92, 42, 232, 21, 147, 148, 238, 230, 25, 247, 168, 195, 253, 124, 26, 138, 208, 254, 0, 120, 144, 204, 45, 127, 189, 178, 149, 166, 52, 76, 91, 77, 86, 96, 221, 4, 59, 136, 73, 139, 25 }, new byte[] { 203, 206, 67, 226, 202, 45, 176, 98, 179, 1, 234, 218, 133, 102, 29, 204, 136, 123, 117, 247, 140, 209, 37, 123, 215, 210, 182, 131, 44, 197, 66, 234, 52, 98, 213, 2, 83, 158, 71, 235, 214, 12, 16, 114, 189, 38, 36, 151, 55, 253, 51, 136, 134, 134, 149, 202, 150, 113, 125, 16, 120, 150, 210, 2, 33, 142, 139, 254, 139, 113, 239, 165, 180, 90, 228, 29, 50, 248, 157, 93, 73, 66, 53, 173, 105, 182, 62, 82, 139, 193, 54, 238, 170, 67, 86, 84, 107, 177, 142, 27, 254, 236, 24, 131, 169, 138, 152, 29, 21, 131, 106, 118, 9, 43, 105, 180, 184, 207, 83, 228, 217, 117, 90, 106, 252, 58, 72, 166 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: new Guid("668abb5d-51f7-4db1-b3b4-69b3fc32fa6e"),
                columns: new[] { "Password", "PasswordSalt" },
                values: new object[] { new byte[] { 168, 171, 214, 112, 140, 123, 189, 168, 118, 83, 20, 4, 128, 131, 61, 137, 192, 65, 237, 112, 145, 188, 54, 182, 94, 106, 53, 192, 193, 46, 59, 85, 32, 103, 39, 63, 167, 125, 129, 239, 219, 75, 128, 161, 196, 138, 75, 51, 54, 16, 228, 182, 53, 135, 25, 128, 187, 158, 44, 114, 64, 246, 36, 129 }, new byte[] { 117, 9, 41, 1, 208, 144, 205, 141, 164, 63, 226, 228, 250, 164, 183, 103, 53, 210, 145, 131, 48, 101, 250, 214, 153, 96, 8, 186, 226, 185, 201, 119, 7, 106, 87, 171, 189, 13, 255, 91, 132, 40, 95, 180, 160, 1, 197, 209, 15, 134, 189, 194, 215, 98, 50, 131, 158, 222, 44, 33, 73, 255, 17, 5, 58, 0, 109, 189, 38, 231, 200, 206, 164, 120, 181, 69, 25, 59, 68, 26, 96, 244, 69, 76, 73, 199, 160, 125, 130, 184, 252, 253, 45, 83, 93, 138, 192, 79, 244, 42, 68, 20, 187, 249, 88, 7, 148, 234, 162, 19, 217, 94, 213, 93, 89, 252, 161, 87, 29, 121, 153, 37, 124, 15, 67, 189, 202, 26 } });
        }
    }
}
